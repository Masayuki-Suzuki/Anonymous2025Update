services:
    postgres:
        image: postgres:17
        container_name: postgres
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"

    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
        ports:
            - "5050:80"
        depends_on:
            - postgres

    strapi:
        build:
            context: ./apps/strapi
            dockerfile: Dockerfile
        container_name: strapi
        restart: unless-stopped
        environment:
            DATABASE_CLIENT: ${DATABASE_CLIENT}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_NAME: ${DB_NAME}
            DB_USER: ${DB_USER}
            DB_PASSWORD: ${DB_PASSWORD}
            HOST: ${HOST}
            PORT: ${PORT}
            APP_KEYS: ${APP_KEYS}
            API_TOKEN_SALT: ${API_TOKEN_SALT}
            ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
            TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
            JWT_SECRET: ${JWT_SECRET}
            ENCRYPTION_KEY: ${ENCRYPTION_KEY}
        volumes:
            - ./apps/strapi/config:/opt/app/config
            - ./apps/strapi/src:/opt/app/src
            - ./apps/strapi/package.json:/opt/package.json
            - ./apps/strapi/.env:/opt/app/.env
            - ./apps/strapi/public/uploads:/opt/app/public/uploads
        ports:
            - "1337:1337"
        depends_on:
            - postgres

    frontend:
        build:
            context: ./apps/frontend
            dockerfile: Dockerfile
        container_name: frontend
        restart: always
        ports:
            - "3000:3000"
        environment:
            NEXT_PUBLIC_STRAPI_URL: ${NEXT_PUBLIC_STRAPI_URL}
            NEXT_PUBLIC_GRAPHQL_API_URL: ${NEXT_PUBLIC_GRAPHQL_API_URL}
            NEXT_PUBLIC_STRAPI_API_TOKEN: ${NEXT_PUBLIC_STRAPI_API_TOKEN}
            NEXT_PUBLIC_IS_BUILDER: "false"
            NODE_ENV: ${NODE_ENV}
#        volumes:
            # In development mode, mount the local directory
            # In production, this should be commented out
#            - ./apps/frontend:/app
        depends_on:
            - strapi
#        command: sh -c "if [ \"$${NODE_ENV}\" = \"production\" ]; then yarn build && yarn start; else yarn dev; fi"

volumes:
    postgres_data:

networks:
#   caddy_net:
#   	    external: true

    default:
        external:
            name: caddy_net
